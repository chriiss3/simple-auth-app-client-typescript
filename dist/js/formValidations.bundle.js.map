{"version":3,"file":"js/formValidations.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwE;;;;;;;UC5CxE;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;ACN0E;AAC1E;AACA;AACA;AACA,8CAA8C,6DAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8CAA8C,6DAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6DAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAW;AACxC,wBAAwB,8CAAM;AAC9B,+BAA+B,8CAAM;AACrC,8BAA8B,8CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAW;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC,mDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAW;AACvC,wBAAwB,8CAAM;AAC9B,+BAA+B,8CAAM;AACrC,8BAA8B,8CAAM;AACpC;AACA;AACA;AACA,+BAA+B,mDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,mDAAW;AAC1C;AACA;AACA;AACA;AAC6M","sources":["webpack://simple-auth-app-client-typescript/./src/ts/constants.ts","webpack://simple-auth-app-client-typescript/webpack/bootstrap","webpack://simple-auth-app-client-typescript/webpack/runtime/define property getters","webpack://simple-auth-app-client-typescript/webpack/runtime/hasOwnProperty shorthand","webpack://simple-auth-app-client-typescript/webpack/runtime/make namespace object","webpack://simple-auth-app-client-typescript/./src/ts/utils/formValidations.ts"],"sourcesContent":["const CLIENT_ERROR_MESSAGES = {\n    invalidMail: \"Correo invalido.\",\n    requiredField: \"Este campo es obligatorio.\",\n    unknownError: \"Error desconocido\",\n    networkError: \"No hay conexion a internet\",\n    invalidPasswordLength: \"Logitud de contraseña invalida.\",\n    passwordNotMath: \"Las contraseñas no coinciden.\",\n    incorrectPassword: \"Contraseña incorrecta.\",\n    accountNotFound: \"Esta cuenta no existe.\",\n};\nconst PAGES = {\n    forgotPassword: \"forgot-password\",\n    home: \"home\",\n    login: \"login\",\n    register: \"register\",\n    resetPassword: \"reset-password\",\n    settings: \"settings\"\n};\nconst CSS_CLASSES = {\n    loading: \"loading\",\n    visible: \"visible\",\n};\nconst SELECTORS = {\n    newPasswordInput: \"#new-password-input\",\n    confirmNewPasswordInput: \"#confirm-new-password-input\",\n    nameInput: \"#name-input\",\n    logoutButton: \".logout-button\",\n    userName: \".user-name\",\n    label: \".label\",\n    input: \".input\",\n    toastNotif: \".toast-notif\",\n    emailLabel: \"#email-label\",\n    emailInput: \"#email-input\",\n    passwordInput: \"#password-input\",\n    dataError: \".data-error\",\n    fieldError: \".field-error\",\n    submitButton: \".submit-button\",\n    form: \".form\",\n    eyeIcon: \".eye-icon\",\n    eyeOffIcon: \".eye-off-icon\",\n};\nconst COLORS = {\n    red: \"#9A0000\",\n};\nexport { CLIENT_ERROR_MESSAGES, PAGES, CSS_CLASSES, SELECTORS, COLORS };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { CSS_CLASSES, CLIENT_ERROR_MESSAGES, COLORS } from \"../constants\";\nconst validateEmail = (value, dataError, input, label) => {\n    const REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!REGEX.test(value)) {\n        addFormError(dataError, input, label, CLIENT_ERROR_MESSAGES.invalidMail);\n        return true;\n    }\n    return false;\n};\nconst validateFields = (labels, inputs, fieldsError) => {\n    let emptyInput = false;\n    inputs.forEach((input, i) => {\n        const inputElement = input;\n        if (inputElement.value === \"\") {\n            const label = labels[i];\n            const errorMessage = fieldsError[i];\n            addFieldError(errorMessage, inputElement, label);\n            emptyInput = true;\n        }\n        else {\n            const label = labels[i];\n            const errorMessage = fieldsError[i];\n            removeFieldError(errorMessage, inputElement, label);\n        }\n    });\n    return emptyInput;\n};\nconst validatePasswordLength = (password, dataError, input, label) => {\n    if (password.length < 8) {\n        addFormError(dataError, input, label, CLIENT_ERROR_MESSAGES.invalidPasswordLength);\n        return true;\n    }\n    return false;\n};\nconst validatePasswordMatch = (password, confirmPassword, dataError, confirmPasswordInput, label) => {\n    if (password !== confirmPassword) {\n        addFormError(dataError, confirmPasswordInput, label, CLIENT_ERROR_MESSAGES.passwordNotMath);\n        return true;\n    }\n    return false;\n};\nconst validateField = (inputValue, fieldError, input, label) => {\n    if (inputValue === \"\") {\n        addFieldError(fieldError, input, label);\n        return true;\n    }\n    return false;\n};\nconst addFieldError = (fieldError, input, label) => {\n    fieldError.classList.add(CSS_CLASSES.visible);\n    label.style.color = COLORS.red;\n    input.style.outlineColor = COLORS.red;\n    input.style.borderColor = COLORS.red;\n};\nconst removeFieldsError = (fieldsError, inputs, labels) => {\n    inputs.forEach((input, index) => {\n        const label = labels[index];\n        const fieldError = fieldsError[index];\n        const inputElement = input;\n        fieldError.classList.remove(CSS_CLASSES.visible);\n        label.style.color = \"\";\n        inputElement.style.outlineColor = \"\";\n        inputElement.style.borderColor = \"\";\n    });\n};\nconst removeFieldError = (fieldError, input, label) => {\n    fieldError.classList.remove(CSS_CLASSES.visible);\n    label.style.color = \"\";\n    input.style.outlineColor = \"\";\n    input.style.borderColor = \"\";\n};\nconst addFormError = (dataError, input, label, message) => {\n    dataError.textContent = message;\n    dataError.classList.add(CSS_CLASSES.visible);\n    label.style.color = COLORS.red;\n    input.style.outlineColor = COLORS.red;\n    input.style.borderColor = COLORS.red;\n    input.focus();\n};\nconst removeFormErrors = (dataError, inputs, labels) => {\n    dataError.classList.remove(CSS_CLASSES.visible);\n    inputs.forEach((input, index) => {\n        const label = labels[index];\n        const inputElement = input;\n        label.style.color = \"\";\n        inputElement.style.outlineColor = \"\";\n        inputElement.style.borderColor = \"\";\n    });\n};\nconst removeFormError = (dataError, input, label) => {\n    dataError.classList.remove(CSS_CLASSES.visible);\n    label.style.color = \"\";\n    input.style.outlineColor = \"\";\n    input.style.borderColor = \"\";\n};\nexport { validateEmail, validateFields, validatePasswordLength, validatePasswordMatch, validateField, addFieldError, removeFieldsError, removeFieldError, addFormError, removeFormErrors, removeFormError, };\n"],"names":[],"sourceRoot":""}